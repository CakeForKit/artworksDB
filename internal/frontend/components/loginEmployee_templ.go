// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func LoginPage(tokenKey string, errorMsg string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"login-container\"><div class=\"login-card\"><h2 class=\"login-title\">Вход для сотрудников</h2><!-- Блок для отображения ошибок (изначально скрыт) --><div id=\"error-message\" class=\"login-error\" style=\"display: none;\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(errorMsg)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/loginEmployee.templ`, Line: 12, Col: 30}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><form id=\"login-form\" class=\"login-form\"><div class=\"form-group\"><label for=\"login\">Логин</label> <input type=\"text\" id=\"login\" name=\"login\" required minlength=\"4\" maxlength=\"50\" pattern=\"[a-zA-Z0-9]+\" title=\"Только латинские буквы и цифры (4-50 символов)\" placeholder=\"Введите ваш логин\"></div><div class=\"form-group\"><label for=\"password\">Пароль</label> <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"4\" placeholder=\"Введите ваш пароль\"></div><button type=\"button\" id=\"login-btn\" class=\"login-button\">Войти</button></form></div></div><script>\n            const ACCESS_TOKEN_KEY = \"@tokenKey\";\n            console.log('Начало чего то'); \n            document.getElementById('login-btn').addEventListener('click', async function() {\n                const btn = this;\n                const login = document.getElementById('login').value;\n                const password = document.getElementById('password').value;\n                const errorElement = document.getElementById('error-message');\n                \n                // Скрываем предыдущие ошибки\n                errorElement.style.display = 'none';\n                errorElement.textContent = '';\n\n                btn.disabled = true;\n                btn.textContent = 'Авторизация...';\n                \n                console.log('Начало авторизации'); // Логирование\n\n                try {\n                    const response = await fetch('/api/v1/auth-employee/login', {\n                        method: 'POST',\n                        mode: 'cors',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            login: login,\n                            password: password\n                        })\n                    });\n\n                    console.log('Получен ответ:', response.status); // Логирование\n                    \n                    if (!response.ok) {\n                        const error = await response.json();\n                        throw new Error(error.error || 'Ошибка авторизации');\n                    }\n                    \n                    const data = await response.json();\n                    console.log('Данные ответа:', data); // Логирование\n\n                    localStorage.setItem(ACCESS_TOKEN_KEY, data.access_token);\n                    document.cookie = `access_token=${encodeURIComponent(data.access_token)}; Path=/; SameSite=Strict; Max-Age=86400${location.protocol === 'https:' ? '; Secure' : ''}`;\n                    console.log('Токен сохранен в localStorage и Cookie:', localStorage.getItem(ACCESS_TOKEN_KEY)); // Логирование\n                    window.location.href = '/museum/employee/authors';\n                    // navigateToAuthors();\n                } catch (error) {\n                    // Показываем ошибку без перезагрузки страницы\n                    errorElement.textContent = 'Неверный логин или пароль';\n                    errorElement.style.display = 'block';\n                    \n                    // Анимация для привлечения внимания\n                    errorElement.style.animation = 'shake 0.5s';\n                    setTimeout(() => {\n                        errorElement.style.animation = '';\n                    }, 500);\n                } finally {\n                    btn.disabled = false;\n                    btn.textContent = 'Войти';\n                }\n            }); \n            // Обработка нажатия Enter в полях формы\n            document.getElementById('login-form').addEventListener('keypress', function(e) {\n                if (e.key === 'Enter') {\n                    e.preventDefault();\n                    document.getElementById('login-btn').click();\n                }\n            });\n        </script> <style>\n            /* Анимация для ошибки */\n            @keyframes shake {\n                0%, 100% { transform: translateX(0); }\n                10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }\n                20%, 40%, 60%, 80% { transform: translateX(5px); }\n            }\n            \n            .login-error {\n                background-color: #ffebee;\n                color: #c62828;\n                padding: 12px;\n                border-radius: 4px;\n                margin-bottom: 16px;\n                border: 1px solid #ef9a9a;\n            }\n        </style>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = UsersNavigate("Авторизация сотрудников").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
