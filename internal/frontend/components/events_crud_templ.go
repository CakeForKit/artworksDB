// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
	"time"
)

func EventsCRUDPage(tokenKey string, events []jsonreqresp.EventResponse, artworks []jsonreqresp.ArtworkResponse) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSONScript("artworksJSON", artworks).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"crud-container\" id=\"eventsContainer\"><!-- Основное модальное окно для мероприятий --><div class=\"modal\" id=\"eventModal\" style=\"display: none;\"><div class=\"modal-content\" onclick=\"event.stopPropagation()\"><h3 id=\"modalTitle\">Добавить мероприятие</h3><form id=\"eventForm\" onsubmit=\"return handleEventFormSubmit(event)\"><input type=\"hidden\" id=\"eventId\"><div class=\"form-group\"><label>Название мероприятия</label> <input type=\"text\" id=\"eventTitle\" required minlength=\"2\" maxlength=\"100\"></div><div class=\"form-group\"><label>Дата начала</label> <input type=\"datetime-local\" id=\"dateBegin\" required></div><div class=\"form-group\"><label>Дата окончания</label> <input type=\"datetime-local\" id=\"dateEnd\" required></div><div class=\"form-group\"><label>Адрес</label> <input type=\"text\" id=\"address\" required minlength=\"2\" maxlength=\"200\"></div><div class=\"form-group\"><label>Доступно для посещения</label> <select id=\"canVisit\" required><option value=\"true\">Да</option> <option value=\"false\">Нет</option></select></div><div class=\"form-group\"><label>Количество билетов</label> <input type=\"number\" id=\"cntTickets\" required min=\"0\"></div><div class=\"form-actions\"><button type=\"button\" onclick=\"closeModal()\">Отмена</button> <button type=\"submit\" id=\"submitButton\">Добавить</button></div></form></div></div><!-- Модальное окно для управления произведениями на мероприятии --><div class=\"modal\" id=\"artworksModal\" style=\"display: none;\"><div class=\"modal-content wide-modal\" onclick=\"event.stopPropagation()\"><h3 id=\"artworksModalTitle\">Произведения на мероприятии</h3><input type=\"hidden\" id=\"currentEventId\"><div class=\"artworks-management\"><div class=\"available-artworks\"><h4>Доступные произведения</h4><div class=\"artworks-list\" id=\"availableArtworks\"><!-- Список будет заполнен через JS --></div></div><div class=\"artworks-actions\"><button onclick=\"addSelectedArtworks()\">Добавить →</button> <button onclick=\"removeSelectedArtworks()\">← Удалить</button></div><div class=\"event-artworks\"><h4>Произведения на мероприятии</h4><div class=\"artworks-list\" id=\"eventArtworks\"><!-- Список будет заполнен через JS --></div></div></div><div class=\"form-actions\"><button type=\"button\" onclick=\"closeArtworksModal()\">Закрыть</button></div></div></div><!-- Основной интерфейс --><div class=\"crud-header\"><h2>Мероприятия</h2><button class=\"add-button\" onclick=\"resetAndOpenModal()\">+ Добавить мероприятие</button></div><!-- Таблица мероприятий --><table class=\"crud-table\"><thead><tr><th>Название</th><th>Даты проведения</th><th>Адрес</th><th>Доступно</th><th>Билеты</th><th>Произведения</th><th>Действия</th></tr></thead> <tbody>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, event := range events {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<tr><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(event.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 146, Col: 45}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(event.DateBegin.Format("02.01.2006 15:04"))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 148, Col: 76}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " -<br>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(event.DateEnd.Format("02.01.2006 15:04"))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 149, Col: 74}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(event.Address)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 151, Col: 47}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if event.CanVisit {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<span class=\"status-active\">Да</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<span class=\"status-inactive\">Нет</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(event.CntTickets)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 159, Col: 50}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("openArtworksManagement", event.ID, event.Title))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<button class=\"manage-artworks-btn\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 templ.ComponentScript = templ.JSFuncCall("openArtworksManagement", event.ID, event.Title)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var8.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\">Управлять (")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(len(event.ArtworkIDs))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/events_crud.templ`, Line: 164, Col: 76}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, ")</button></td><td class=\"actions\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("prepareEditModal",
					event.ID,
					event.Title,
					event.DateBegin.Format(time.RFC3339),
					event.DateEnd.Format(time.RFC3339),
					event.Address,
					event.CanVisit,
					event.CntTickets))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<button class=\"edit-btn\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 templ.ComponentScript = templ.JSFuncCall("prepareEditModal",
					event.ID,
					event.Title,
					event.DateBegin.Format(time.RFC3339),
					event.DateEnd.Format(time.RFC3339),
					event.Address,
					event.CanVisit,
					event.CntTickets)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var10.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\">✏️</button> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("confirmDeleteEvent", event.ID))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<button class=\"delete-btn\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var11 templ.ComponentScript = templ.JSFuncCall("confirmDeleteEvent", event.ID)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var11.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\">🗑️</button></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</tbody></table><!-- Скрипты для работы с API --><script>\n                const ACCESS_TOKEN_KEY = \"@tokenKey\";\n                const ALL_ARTWORKS = JSON.parse(document.getElementById('artworksJSON').textContent);\n                \n                // Текущее состояние\n                let isEditing = false;\n                let currentEvent = {\n                    id: '',\n                    title: '',\n                    dateBegin: '',\n                    dateEnd: '',\n                    address: '',\n                    canVisit: true,\n                    cntTickets: 0\n                };\n\n                // Элементы DOM\n                const eventModal = document.getElementById('eventModal');\n                const artworksModal = document.getElementById('artworksModal');\n                const modalTitle = document.getElementById('modalTitle');\n                const artworksModalTitle = document.getElementById('artworksModalTitle');\n                const submitButton = document.getElementById('submitButton');\n                const eventForm = document.getElementById('eventForm');\n                const eventIdInput = document.getElementById('eventId');\n                const eventTitleInput = document.getElementById('eventTitle');\n                const dateBeginInput = document.getElementById('dateBegin');\n                const dateEndInput = document.getElementById('dateEnd');\n                const addressInput = document.getElementById('address');\n                const canVisitInput = document.getElementById('canVisit');\n                const cntTicketsInput = document.getElementById('cntTickets');\n                const currentEventIdInput = document.getElementById('currentEventId');\n                const availableArtworksList = document.getElementById('availableArtworks');\n                const eventArtworksList = document.getElementById('eventArtworks');\n\n                // Обработчики модальных окон\n                function openModal() {\n                    eventModal.style.display = 'flex';\n                }\n\n                function closeModal() {\n                    eventModal.style.display = 'none';\n                    window.location.reload();\n                }\n\n                function openArtworksModal() {\n                    artworksModal.style.display = 'flex';\n                }\n\n                function closeArtworksModal() {\n                    artworksModal.style.display = 'none';\n                    window.location.reload();\n                }\n\n                // Клик вне модального окна\n                eventModal.addEventListener('click', function(e) {\n                    if (e.target === eventModal) {\n                        closeModal();\n                    }\n                });\n\n                artworksModal.addEventListener('click', function(e) {\n                    if (e.target === artworksModal) {\n                        closeArtworksModal();\n                    }\n                });\n\n                function resetAndOpenModal() {\n                    console.log('Токен:', localStorage.getItem(ACCESS_TOKEN_KEY));\n                    isEditing = false;\n                    currentEvent = { \n                        id: '', \n                        title: '', \n                        dateBegin: new Date().toISOString().slice(0, 16),\n                        dateEnd: new Date(Date.now() + 3600000).toISOString().slice(0, 16),\n                        address: '',\n                        canVisit: true,\n                        cntTickets: 0\n                    };\n                    updateFormFields();\n                    modalTitle.textContent = 'Добавить мероприятие';\n                    submitButton.textContent = 'Добавить';\n                    openModal();\n                }\n\n                function prepareEditModal(id, title, dateBegin, dateEnd, address, canVisit, cntTickets) {\n                    isEditing = true;\n                    currentEvent = {\n                        id: id,\n                        title: title,\n                        dateBegin: dateBegin,\n                        dateEnd: dateEnd,\n                        address: address,\n                        canVisit: canVisit,\n                        cntTickets: cntTickets\n                    };\n                    // Преобразуем даты ISO в формат datetime-local\n                    const formatForInput = (isoString) => {\n                        const dt = new Date(isoString);\n                        return dt.toISOString().slice(0, 16);\n                    };\n                    \n                    updateFormFields();\n                    modalTitle.textContent = 'Редактировать мероприятие';\n                    submitButton.textContent = 'Сохранить';\n                    openModal();\n                }\n\n                function updateFormFields() {\n                    eventIdInput.value = currentEvent.id;\n                    eventTitleInput.value = currentEvent.title;\n                    dateBeginInput.value = currentEvent.dateBegin.slice(0, 16);\n                    dateEndInput.value = currentEvent.dateEnd.slice(0, 16);\n                    addressInput.value = currentEvent.address;\n                    canVisitInput.value = currentEvent.canVisit;\n                    cntTicketsInput.value = currentEvent.cntTickets;\n                }\n\n                async function openArtworksManagement(eventId, eventTitle) {\n                    currentEventIdInput.value = eventId;\n                    await loadArtworksForEvent(eventId);\n                    artworksModalTitle.textContent = `Управление произведениями (${eventTitle})`;\n                    openArtworksModal();\n                }\n\n                async function loadArtworksForEvent(eventId) {\n                    try {\n                        // Загружаем произведения на мероприятии\n                        const response = await fetch(`/api/v1/employee/events/${eventId}/artworks`, {\n                            headers: {\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            }\n                        });\n                        \n                        if (!response.ok) throw await response.json();\n                        \n                        const eventArtworks = await response.json();\n                        renderArtworksLists(eventArtworks);\n                    } catch (error) {\n                        console.error('Ошибка загрузки произведений:', error);\n                        alert('Не удалось загрузить произведения');\n                    }\n                }\n\n                function renderArtworksLists(eventArtworks) {\n                    // Очищаем списки\n                    availableArtworksList.innerHTML = '';\n                    eventArtworksList.innerHTML = '';\n                    \n                    // Собираем ID произведений на мероприятии\n                    const eventArtworkIds = new Set(eventArtworks.map(aw => aw.id));\n                    \n                    // Разделяем все произведения на доступные и уже добавленные\n                    ALL_ARTWORKS.forEach(artwork => {\n                        const artworkElement = `\n                            <div class=\"artwork-item\">\n                                <input type=\"checkbox\" id=\"artwork-${artwork.id}\" value=\"${artwork.id}\">\n                                <label for=\"artwork-${artwork.id}\">${artwork.title} (${artwork.author.name})</label>\n                            </div>\n                        `;\n                        \n                        if (eventArtworkIds.has(artwork.id)) {\n                            eventArtworksList.innerHTML += artworkElement;\n                        } else {\n                            availableArtworksList.innerHTML += artworkElement;\n                        }\n                    });\n                }\n\n                async function addSelectedArtworks() {\n                    const eventId = currentEventIdInput.value;\n                    const checkboxes = availableArtworksList.querySelectorAll('input[type=\"checkbox\"]:checked');\n                    \n                    if (checkboxes.length === 0) {\n                        alert('Выберите произведения для добавления');\n                        return;\n                    }\n                    \n                    try {\n                        // Добавляем каждое произведение по одному\n                        for (const checkbox of checkboxes) {\n                            const response = await fetch(`/api/v1/employee/events/${eventId}`, {\n                                method: 'PUT',\n                                headers: { \n                                    'Content-Type': 'application/json',\n                                    'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                                },\n                                body: JSON.stringify({\n                                    artworkID: checkbox.value\n                                })\n                            });\n                            \n                            if (!response.ok) throw await response.json();\n                        }\n                        \n                        await loadArtworksForEvent(eventId);\n                    } catch (error) {\n                        console.error('Ошибка добавления произведений:', error);\n                        alert(error.error || 'Не удалось добавить произведения');\n                    }\n                }\n\n                async function removeSelectedArtworks() {\n                    const eventId = currentEventIdInput.value;\n                    const checkboxes = eventArtworksList.querySelectorAll('input[type=\"checkbox\"]:checked');\n                    \n                    if (checkboxes.length === 0) {\n                        alert('Выберите произведения для удаления');\n                        return;\n                    }\n                    \n                    try {\n                        // Удаляем каждое произведение по одному\n                        for (const checkbox of checkboxes) {\n                            const response = await fetch(`/api/v1/employee/events/${eventId}`, {\n                                method: 'DELETE',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                                },\n                                body: JSON.stringify({\n                                    artworkID: checkbox.value // Отправляем один artworkID\n                                })\n                            });\n                            \n                            if (!response.ok) {\n                                const error = await response.json();\n                                throw error;\n                            }\n                        }\n                        \n                        // Обновляем список после всех удалений\n                        await loadArtworksForEvent(eventId);\n                    } catch (error) {\n                        console.error('Ошибка удаления произведений:', error);\n                        alert(error.error || 'Не удалось удалить произведения');\n                    }\n                }\n\n                async function handleEventFormSubmit(event) {\n                    event.preventDefault();\n                    // Преобразуем даты в формат ISO 8601\n                    const dateBegin = new Date(dateBeginInput.value).toISOString();\n                    const dateEnd = new Date(dateEndInput.value).toISOString();\n\n                    const formData = {\n                        title: eventTitleInput.value,\n                        dateBegin: dateBegin,\n                        dateEnd: dateEnd,\n                        address: addressInput.value,\n                        canVisit: canVisitInput.value === 'true',\n                        cntTickets: parseInt(cntTicketsInput.value)\n                    };\n                    console.log('formData:', formData);\n                    if (isEditing) {\n                        formData.id = eventIdInput.value;\n                        await updateEvent(formData);\n                    } else {\n                        await addEvent(formData);\n                    }\n                }\n\n                async function confirmDeleteEvent(id) {\n                    if (!confirm('Удалить мероприятие? Это действие нельзя отменить.')) return;\n                    await deleteEvent(id);\n                }\n\n                // API функции для мероприятий\n                async function fetchEvents() {\n                    try {\n                        const response = await fetch('/api/v1/employee/events', {\n                            headers: {\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            }\n                        });\n                        return await response.json();\n                    } catch (error) {\n                        console.error('Ошибка загрузки мероприятий:', error);\n                        return [];\n                    }\n                }\n\n                async function addEvent(data) {\n                    try {\n                        const response = await fetch('/api/v1/employee/events', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify(data)\n                        });\n\n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка добавления:', error);\n                        alert(error.error || 'Ошибка добавления мероприятия');\n                    }\n                }\n\n                async function updateEvent(data) {\n                    try {\n                        const response = await fetch('/api/v1/employee/events', {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify(data)\n                        });\n\n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка обновления:', error);\n                        alert(error.error || 'Ошибка обновления мероприятия');\n                    }\n                }\n\n                async function deleteEvent(id) {\n                    try {\n                        const response = await fetch('/api/v1/employee/events', {\n                            method: 'DELETE',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify({ id })\n                        });\n \n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка удаления:', error);\n                        alert(error.error || 'Не удалось удалить мероприятие');\n                    }\n                }\n\n                // Инициализация при загрузке\n                document.addEventListener('DOMContentLoaded', function() {\n                    // Установка минимальной даты окончания при изменении даты начала\n                    dateBeginInput.addEventListener('change', function() {\n                        dateEndInput.min = this.value;\n                    });\n                });\n            </script></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = EmployeesNavigate("Управление мероприятиями").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
