// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
	"time"
)

func ArtworksCRUDPage(tokenKey string, artworks []jsonreqresp.ArtworkResponse, authors []jsonreqresp.AuthorResponse, collections []jsonreqresp.CollectionResponse) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"crud-container\" id=\"artworksContainer\"><!-- Модальное окно для добавления/редактирования --><div class=\"modal\" id=\"artworkModal\" style=\"display: none;\"><div class=\"modal-content\" onclick=\"event.stopPropagation()\"><h3 id=\"modalTitle\">Добавить произведение</h3><form id=\"artworkForm\" onsubmit=\"return handleFormSubmit(event)\"><input type=\"hidden\" id=\"artworkId\"><div class=\"form-group\"><label>Название произведения</label> <input type=\"text\" id=\"artworkTitle\" required minlength=\"2\" maxlength=\"100\"></div><div class=\"form-group\"><label>Год создания</label> <input type=\"number\" id=\"creationYear\" required min=\"1000\" max=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(time.Now().String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 37, Col: 57}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"></div><div class=\"form-group\"><label>Техника</label> <input type=\"text\" id=\"technic\" required minlength=\"2\" maxlength=\"100\"></div><div class=\"form-group\"><label>Материал</label> <input type=\"text\" id=\"material\" required minlength=\"2\" maxlength=\"100\"></div><div class=\"form-group\"><label>Размер</label> <input type=\"text\" id=\"size\" required minlength=\"2\" maxlength=\"100\"></div><div class=\"form-group\"><label>Автор</label> <select id=\"authorId\" required><option value=\"\">Выберите автора</option> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, author := range authors {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(author.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 79, Col: 61}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(author.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 79, Col: 77}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</select></div><div class=\"form-group\"><label>Коллекция</label> <select id=\"collectionId\" required><option value=\"\">Выберите коллекцию</option> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, collection := range collections {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(collection.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 89, Col: 65}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(collection.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 89, Col: 86}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</select></div><div class=\"form-actions\"><button type=\"button\" onclick=\"closeModal()\">Отмена</button> <button type=\"submit\" id=\"submitButton\">Добавить</button></div></form></div></div><!-- Основной интерфейс --><div class=\"crud-header\"><h2>Произведения искусства</h2><button class=\"add-button\" onclick=\"resetAndOpenModal()\">+ Добавить произведение</button></div><!-- Таблица произведений --><table class=\"crud-table\"><thead><tr><th>Название</th><th>Год</th><th>Техника</th><th>Материал</th><th>Размер</th><th>Автор</th><th>Коллекция</th><th>Действия</th></tr></thead> <tbody>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, artwork := range artworks {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<tr><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 128, Col: 47}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.CreationYear)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 129, Col: 54}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Technic)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 130, Col: 49}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var11 string
				templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Material)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 131, Col: 50}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var12 string
				templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Size)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 132, Col: 46}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var13 string
				templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Author.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 133, Col: 53}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</td><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var14 string
				templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(artwork.Collection.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/frontend/components/artworks_crud.templ`, Line: 134, Col: 58}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</td><td class=\"actions\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("prepareEditModal",
					artwork.ID,
					artwork.Title,
					artwork.CreationYear,
					artwork.Technic,
					artwork.Material,
					artwork.Size,
					artwork.Author.ID,
					artwork.Collection.ID))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<button class=\"edit-btn\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var15 templ.ComponentScript = templ.JSFuncCall("prepareEditModal",
					artwork.ID,
					artwork.Title,
					artwork.CreationYear,
					artwork.Technic,
					artwork.Material,
					artwork.Size,
					artwork.Author.ID,
					artwork.Collection.ID)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var15.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\">✏️</button> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("confirmDeleteArtwork", artwork.ID))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<button class=\"delete-btn\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var16 templ.ComponentScript = templ.JSFuncCall("confirmDeleteArtwork", artwork.ID)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var16.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\">🗑️</button></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</tbody></table><!-- Скрипты для работы с API --><script>\n                const ACCESS_TOKEN_KEY = \"@tokenKey\";\n                \n                // Текущее состояние\n                let isEditing = false;\n                let currentArtwork = {\n                    id: '',\n                    title: '',\n                    creationYear: 0,\n                    technic: '',\n                    material: '',\n                    size: '',\n                    authorId: '',\n                    collectionId: ''\n                };\n\n                // Элементы DOM\n                const modal = document.getElementById('artworkModal');\n                const modalTitle = document.getElementById('modalTitle');\n                const submitButton = document.getElementById('submitButton');\n                const artworkForm = document.getElementById('artworkForm');\n                const artworkIdInput = document.getElementById('artworkId');\n                const artworkTitleInput = document.getElementById('artworkTitle');\n                const creationYearInput = document.getElementById('creationYear');\n                const technicInput = document.getElementById('technic');\n                const materialInput = document.getElementById('material');\n                const sizeInput = document.getElementById('size');\n                const authorIdInput = document.getElementById('authorId');\n                const collectionIdInput = document.getElementById('collectionId');\n\n                // Обработчики модального окна\n                function openModal() {\n                    modal.style.display = 'flex';\n                }\n\n                function closeModal() {\n                    modal.style.display = 'none';\n                }\n\n                // Клик вне модального окна\n                modal.addEventListener('click', function(e) {\n                    if (e.target === modal) {\n                        closeModal();\n                    }\n                });\n\n                function resetAndOpenModal() {\n                    isEditing = false;\n                    currentArtwork = { \n                        id: '', \n                        title: '', \n                        creationYear: new Date().getFullYear(), \n                        technic: '', \n                        material: '', \n                        size: '', \n                        authorId: '', \n                        collectionId: '' \n                    };\n                    updateFormFields();\n                    modalTitle.textContent = 'Добавить произведение';\n                    submitButton.textContent = 'Добавить';\n                    openModal();\n                }\n\n                function prepareEditModal(id, title, creationYear, technic, material, size, authorId, collectionId) {\n                    isEditing = true;\n                    currentArtwork = {\n                        id: id,\n                        title: title,\n                        creationYear: creationYear,\n                        technic: technic,\n                        material: material,\n                        size: size,\n                        authorId: authorId,\n                        collectionId: collectionId\n                    };\n                    updateFormFields();\n                    modalTitle.textContent = 'Редактировать произведение';\n                    submitButton.textContent = 'Сохранить';\n                    openModal();\n                }\n\n                function updateFormFields() {\n                    artworkIdInput.value = currentArtwork.id;\n                    artworkTitleInput.value = currentArtwork.title;\n                    creationYearInput.value = currentArtwork.creationYear;\n                    technicInput.value = currentArtwork.technic;\n                    materialInput.value = currentArtwork.material;\n                    sizeInput.value = currentArtwork.size;\n                    authorIdInput.value = currentArtwork.authorId;\n                    collectionIdInput.value = currentArtwork.collectionId;\n                }\n\n                async function handleFormSubmit(event) {\n                    event.preventDefault();\n                    \n                    const formData = {\n                        title: artworkTitleInput.value,\n                        creationYear: parseInt(creationYearInput.value),\n                        technic: technicInput.value,\n                        material: materialInput.value,\n                        size: sizeInput.value,\n                        authorID: authorIdInput.value,\n                        collectionID: collectionIdInput.value\n                    };\n\n                    if (isEditing) {\n                        formData.id = artworkIdInput.value;\n                        await updateArtwork(formData);\n                    } else {\n                        await addArtwork(formData);\n                    }\n                }\n\n                async function confirmDeleteArtwork(id) {\n                    if (!confirm('Удалить произведение? Это действие нельзя отменить.')) return;\n                    await deleteArtwork(id);\n                }\n\n                // API функции\n                async function fetchArtworks() {\n                    try {\n                        const response = await fetch('/api/v1/employee/artworks', {\n                            headers: {\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            }\n                        });\n                        return await response.json();\n                    } catch (error) {\n                        console.error('Ошибка загрузки произведений:', error);\n                        return [];\n                    }\n                }\n\n                async function addArtwork(data) {\n                    try {\n                        const response = await fetch('/api/v1/employee/artworks', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify(data)\n                        });\n\n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка добавления:', error);\n                        alert(error.error || 'Ошибка добавления произведения');\n                    }\n                }\n\n                async function updateArtwork(data) {\n                    try {\n                        const response = await fetch('/api/v1/employee/artworks', {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify(data)\n                        });\n\n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка обновления:', error);\n                        alert(error.error || 'Ошибка обновления произведения');\n                    }\n                }\n\n                async function deleteArtwork(id) {\n                    try {\n                        const response = await fetch('/api/v1/employee/artworks', {\n                            method: 'DELETE',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`\n                            },\n                            body: JSON.stringify({ id })\n                        });\n \n                        if (!response.ok) throw await response.json();\n                        window.location.reload();\n                    } catch (error) {\n                        console.error('Ошибка удаления:', error);\n                        alert(error.error || 'Не удалось удалить произведение');\n                    }\n                }\n\n                // Вспомогательные функции\n                function currentYear() {\n                    return new Date().getFullYear();\n                }\n\n                // Инициализация при загрузке\n                document.addEventListener('DOMContentLoaded', function() {\n                    // Установка максимального года создания\n                    creationYearInput.max = currentYear();\n                });\n            </script></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = EmployeesNavigate("Управление произведениями").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
