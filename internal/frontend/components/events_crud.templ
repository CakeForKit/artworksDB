package components

import (
    "git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
    "time"
)


templ EventsCRUDPage(tokenKey string, events []jsonreqresp.EventResponse, artworks []jsonreqresp.ArtworkResponse) {
    // artworksJSON, _ := json.Marshal(artworks)   // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º artworks –≤ JSON —Å—Ç—Ä–æ–∫—É
    @templ.JSONScript("artworksJSON", artworks)
    @EmployeesNavigate("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏") {
        <div class="crud-container" id="eventsContainer">
            <!-- –û—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π -->
            <div class="modal" id="eventModal" style="display: none;">
                <div class="modal-content" onclick="event.stopPropagation()">
                    <h3 id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</h3>
                    
                    <form id="eventForm" onsubmit="return handleEventFormSubmit(event)">
                        <input type="hidden" id="eventId">
                        
                        <div class="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</label>
                            <input 
                                type="text" 
                                id="eventTitle"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                            <input 
                                type="datetime-local" 
                                id="dateBegin"
                                required
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                            <input 
                                type="datetime-local" 
                                id="dateEnd"
                                required
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ê–¥—Ä–µ—Å</label>
                            <input 
                                type="text" 
                                id="address"
                                required
                                minlength="2"
                                maxlength="200"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è</label>
                            <select id="canVisit" required>
                                <option value="true">–î–∞</option>
                                <option value="false">–ù–µ—Ç</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤</label>
                            <input 
                                type="number" 
                                id="cntTickets"
                                required
                                min="0"
                            >
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" id="submitButton">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ -->
            <div class="modal" id="artworksModal" style="display: none;">
                <div class="modal-content wide-modal" onclick="event.stopPropagation()">
                    <h3 id="artworksModalTitle">–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</h3>
                    <input type="hidden" id="currentEventId">
                    
                    <div class="artworks-management">
                        <div class="available-artworks">
                            <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</h4>
                            <div class="artworks-list" id="availableArtworks">
                                <!-- –°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS -->
                            </div>
                        </div>
                        
                        <div class="artworks-actions">
                            <button onclick="addSelectedArtworks()">–î–æ–±–∞–≤–∏—Ç—å ‚Üí</button>
                            <button onclick="removeSelectedArtworks()">‚Üê –£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                        
                        <div class="event-artworks">
                            <h4>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</h4>
                            <div class="artworks-list" id="eventArtworks">
                                <!-- –°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS -->
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" onclick="closeArtworksModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
 
            <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -->
            <div class="crud-header">
                <h2>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>
                <button 
                    class="add-button" 
                    onclick="resetAndOpenModal()"
                >+ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</button>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π -->
            <table class="crud-table">
                <thead>
                    <tr>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</th>
                        <th>–ê–¥—Ä–µ—Å</th>
                        <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
                        <th>–ë–∏–ª–µ—Ç—ã</th>
                        <th>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    for _, event := range events {
                        <tr>
                            <td>{ event.Title }</td>
                            <td>
                                { event.DateBegin.Format("02.01.2006 15:04") } -<br>
                                { event.DateEnd.Format("02.01.2006 15:04") }
                            </td>
                            <td>{ event.Address }</td>
                            <td>
                                if event.CanVisit {
                                    <span class="status-active">–î–∞</span>
                                } else {
                                    <span class="status-inactive">–ù–µ—Ç</span>
                                }
                            </td>
                            <td>{ event.CntTickets }</td>
                            <td>
                                <button 
                                    class="manage-artworks-btn"
                                    onclick={ templ.JSFuncCall("openArtworksManagement", event.ID, event.Title) }
                                >–£–ø—Ä–∞–≤–ª—è—Ç—å ({ len(event.ArtworkIDs) })</button>
                            </td>
                            <td class="actions">
                                <button 
                                    class="edit-btn" 
                                    onclick={ templ.JSFuncCall("prepareEditModal", 
                                        event.ID, 
                                        event.Title, 
                                        event.DateBegin.Format(time.RFC3339), 
                                        event.DateEnd.Format(time.RFC3339), 
                                        event.Address, 
                                        event.CanVisit, 
                                        event.CntTickets) }
                                >‚úèÔ∏è</button>
                                <button 
                                    class="delete-btn" 
                                    onclick={ templ.JSFuncCall("confirmDeleteEvent", event.ID) }
                                >üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API -->
            <script>
                const ACCESS_TOKEN_KEY = "@tokenKey";
                const ALL_ARTWORKS = JSON.parse(document.getElementById('artworksJSON').textContent);
                
                // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                let isEditing = false;
                let currentEvent = {
                    id: '',
                    title: '',
                    dateBegin: '',
                    dateEnd: '',
                    address: '',
                    canVisit: true,
                    cntTickets: 0
                };

                // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
                const eventModal = document.getElementById('eventModal');
                const artworksModal = document.getElementById('artworksModal');
                const modalTitle = document.getElementById('modalTitle');
                const artworksModalTitle = document.getElementById('artworksModalTitle');
                const submitButton = document.getElementById('submitButton');
                const eventForm = document.getElementById('eventForm');
                const eventIdInput = document.getElementById('eventId');
                const eventTitleInput = document.getElementById('eventTitle');
                const dateBeginInput = document.getElementById('dateBegin');
                const dateEndInput = document.getElementById('dateEnd');
                const addressInput = document.getElementById('address');
                const canVisitInput = document.getElementById('canVisit');
                const cntTicketsInput = document.getElementById('cntTickets');
                const currentEventIdInput = document.getElementById('currentEventId');
                const availableArtworksList = document.getElementById('availableArtworks');
                const eventArtworksList = document.getElementById('eventArtworks');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
                function openModal() {
                    eventModal.style.display = 'flex';
                }

                function closeModal() {
                    eventModal.style.display = 'none';
                    window.location.reload();
                }

                function openArtworksModal() {
                    artworksModal.style.display = 'flex';
                }

                function closeArtworksModal() {
                    artworksModal.style.display = 'none';
                    window.location.reload();
                }

                // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                eventModal.addEventListener('click', function(e) {
                    if (e.target === eventModal) {
                        closeModal();
                    }
                });

                artworksModal.addEventListener('click', function(e) {
                    if (e.target === artworksModal) {
                        closeArtworksModal();
                    }
                });

                function resetAndOpenModal() {
                    console.log('–¢–æ–∫–µ–Ω:', localStorage.getItem(ACCESS_TOKEN_KEY));
                    isEditing = false;
                    currentEvent = { 
                        id: '', 
                        title: '', 
                        dateBegin: new Date().toISOString().slice(0, 16),
                        dateEnd: new Date(Date.now() + 3600000).toISOString().slice(0, 16),
                        address: '',
                        canVisit: true,
                        cntTickets: 0
                    };
                    updateFormFields();
                    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
                    submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
                    openModal();
                }

                function prepareEditModal(id, title, dateBegin, dateEnd, address, canVisit, cntTickets) {
                    isEditing = true;
                    currentEvent = {
                        id: id,
                        title: title,
                        dateBegin: dateBegin,
                        dateEnd: dateEnd,
                        address: address,
                        canVisit: canVisit,
                        cntTickets: cntTickets
                    };
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã ISO –≤ —Ñ–æ—Ä–º–∞—Ç datetime-local
                    const formatForInput = (isoString) => {
                        const dt = new Date(isoString);
                        return dt.toISOString().slice(0, 16);
                    };
                    
                    updateFormFields();
                    modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
                    submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    openModal();
                }

                function updateFormFields() {
                    eventIdInput.value = currentEvent.id;
                    eventTitleInput.value = currentEvent.title;
                    dateBeginInput.value = currentEvent.dateBegin.slice(0, 16);
                    dateEndInput.value = currentEvent.dateEnd.slice(0, 16);
                    addressInput.value = currentEvent.address;
                    canVisitInput.value = currentEvent.canVisit;
                    cntTicketsInput.value = currentEvent.cntTickets;
                }

                async function openArtworksManagement(eventId, eventTitle) {
                    currentEventIdInput.value = eventId;
                    await loadArtworksForEvent(eventId);
                    artworksModalTitle.textContent = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏ (${eventTitle})`;
                    openArtworksModal();
                }

                async function loadArtworksForEvent(eventId) {
                    try {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                        const response = await fetch(`/api/v1/employee/events/${eventId}/artworks`, {
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            }
                        });
                        
                        if (!response.ok) throw await response.json();
                        
                        const eventArtworks = await response.json();
                        renderArtworksLists(eventArtworks);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:', error);
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                    }
                }

                function renderArtworksLists(eventArtworks) {
                    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
                    availableArtworksList.innerHTML = '';
                    eventArtworksList.innerHTML = '';
                    
                    // –°–æ–±–∏—Ä–∞–µ–º ID –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                    const eventArtworkIds = new Set(eventArtworks.map(aw => aw.id));
                    
                    // –†–∞–∑–¥–µ–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
                    ALL_ARTWORKS.forEach(artwork => {
                        const artworkElement = `
                            <div class="artwork-item">
                                <input type="checkbox" id="artwork-${artwork.id}" value="${artwork.id}">
                                <label for="artwork-${artwork.id}">${artwork.title} (${artwork.author.name})</label>
                            </div>
                        `;
                        
                        if (eventArtworkIds.has(artwork.id)) {
                            eventArtworksList.innerHTML += artworkElement;
                        } else {
                            availableArtworksList.innerHTML += artworkElement;
                        }
                    });
                }

                async function addSelectedArtworks() {
                    const eventId = currentEventIdInput.value;
                    const checkboxes = availableArtworksList.querySelectorAll('input[type="checkbox"]:checked');
                    
                    if (checkboxes.length === 0) {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
                        return;
                    }
                    
                    try {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É
                        for (const checkbox of checkboxes) {
                            const response = await fetch(`/api/v1/employee/events/${eventId}`, {
                                method: 'PUT',
                                headers: { 
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                                },
                                body: JSON.stringify({
                                    artworkID: checkbox.value
                                })
                            });
                            
                            if (!response.ok) throw await response.json();
                        }
                        
                        await loadArtworksForEvent(eventId);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                    }
                }

                async function removeSelectedArtworks() {
                    const eventId = currentEventIdInput.value;
                    const checkboxes = eventArtworksList.querySelectorAll('input[type="checkbox"]:checked');
                    
                    if (checkboxes.length === 0) {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                        return;
                    }
                    
                    try {
                        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É
                        for (const checkbox of checkboxes) {
                            const response = await fetch(`/api/v1/employee/events/${eventId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                                },
                                body: JSON.stringify({
                                    artworkID: checkbox.value // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω artworkID
                                })
                            });
                            
                            if (!response.ok) {
                                const error = await response.json();
                                throw error;
                            }
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–∏–π
                        await loadArtworksForEvent(eventId);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                    }
                }

                async function handleEventFormSubmit(event) {
                    event.preventDefault();
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç ISO 8601
                    const dateBegin = new Date(dateBeginInput.value).toISOString();
                    const dateEnd = new Date(dateEndInput.value).toISOString();

                    const formData = {
                        title: eventTitleInput.value,
                        dateBegin: dateBegin,
                        dateEnd: dateEnd,
                        address: addressInput.value,
                        canVisit: canVisitInput.value === 'true',
                        cntTickets: parseInt(cntTicketsInput.value)
                    };
                    console.log('formData:', formData);
                    if (isEditing) {
                        formData.id = eventIdInput.value;
                        await updateEvent(formData);
                    } else {
                        await addEvent(formData);
                    }
                }

                async function confirmDeleteEvent(id) {
                    if (!confirm('–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
                    await deleteEvent(id);
                }

                // API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                async function fetchEvents() {
                    try {
                        const response = await fetch('/api/v1/employee/events', {
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            }
                        });
                        return await response.json();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
                        return [];
                    }
                }

                async function addEvent(data) {
                    try {
                        const response = await fetch('/api/v1/employee/events', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
                    }
                }

                async function updateEvent(data) {
                    try {
                        const response = await fetch('/api/v1/employee/events', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
                    }
                }

                async function deleteEvent(id) {
                    try {
                        const response = await fetch('/api/v1/employee/events', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify({ id })
                        });
 
                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
                    }
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                document.addEventListener('DOMContentLoaded', function() {
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
                    dateBeginInput.addEventListener('change', function() {
                        dateEndInput.min = this.value;
                    });
                });
            </script>
        </div>
    }
}