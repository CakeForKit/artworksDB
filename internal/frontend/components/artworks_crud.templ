package components

import (
    "git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
    "time"
)

templ ArtworksCRUDPage(tokenKey string, artworks []jsonreqresp.ArtworkResponse, authors []jsonreqresp.AuthorResponse, collections []jsonreqresp.CollectionResponse) {
    @EmployeesNavigate("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏") {
        <div class="crud-container" id="artworksContainer">
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
            <div class="modal" id="artworkModal" style="display: none;">
                <div class="modal-content" onclick="event.stopPropagation()">
                    <h3 id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ</h3>
                    
                    <form id="artworkForm" onsubmit="return handleFormSubmit(event)">
                        <input type="hidden" id="artworkId">
                        
                        <div class="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</label>
                            <input 
                                type="text" 
                                id="artworkTitle"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è</label>
                            <input 
                                type="number" 
                                id="creationYear"
                                required
                                min="1000"
                                max={ time.Now().String() }
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–¢–µ—Ö–Ω–∏–∫–∞</label>
                            <input 
                                type="text" 
                                id="technic"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ú–∞—Ç–µ—Ä–∏–∞–ª</label>
                            <input 
                                type="text" 
                                id="material"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–†–∞–∑–º–µ—Ä</label>
                            <input 
                                type="text" 
                                id="size"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ê–≤—Ç–æ—Ä</label>
                            <select id="authorId" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞</option>
                                for _, author := range authors {
                                    <option value={ author.ID }>{ author.Name }</option>
                                }
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>–ö–æ–ª–ª–µ–∫—Ü–∏—è</label>
                            <select id="collectionId" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é</option>
                                for _, collection := range collections {
                                    <option value={ collection.ID }>{ collection.Title }</option>
                                }
                            </select>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" id="submitButton">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                    </form>
                </div>
            </div>
 
            <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -->
            <div class="crud-header">
                <h2>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞</h2>
                <button 
                    class="add-button" 
                    onclick="resetAndOpenModal()"
                >+ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ</button>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π -->
            <table class="crud-table">
                <thead>
                    <tr>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–ì–æ–¥</th>
                        <th>–¢–µ—Ö–Ω–∏–∫–∞</th>
                        <th>–ú–∞—Ç–µ—Ä–∏–∞–ª</th>
                        <th>–†–∞–∑–º–µ—Ä</th>
                        <th>–ê–≤—Ç–æ—Ä</th>
                        <th>–ö–æ–ª–ª–µ–∫—Ü–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    for _, artwork := range artworks {
                        <tr>
                            <td>{ artwork.Title }</td>
                            <td>{ artwork.CreationYear }</td>
                            <td>{ artwork.Technic }</td>
                            <td>{ artwork.Material }</td>
                            <td>{ artwork.Size }</td>
                            <td>{ artwork.Author.Name }</td>
                            <td>{ artwork.Collection.Title }</td>
                            <td class="actions">
                                <button 
                                    class="edit-btn" 
                                    onclick={ templ.JSFuncCall("prepareEditModal", 
                                        artwork.ID, 
                                        artwork.Title, 
                                        artwork.CreationYear, 
                                        artwork.Technic, 
                                        artwork.Material, 
                                        artwork.Size, 
                                        artwork.Author.ID, 
                                        artwork.Collection.ID) }
                                >‚úèÔ∏è</button>
                                <button 
                                    class="delete-btn" 
                                    onclick={ templ.JSFuncCall("confirmDeleteArtwork", artwork.ID) }
                                >üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API -->
            <script>
                const ACCESS_TOKEN_KEY = "@tokenKey";
                
                // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                let isEditing = false;
                let currentArtwork = {
                    id: '',
                    title: '',
                    creationYear: 0,
                    technic: '',
                    material: '',
                    size: '',
                    authorId: '',
                    collectionId: ''
                };

                // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
                const modal = document.getElementById('artworkModal');
                const modalTitle = document.getElementById('modalTitle');
                const submitButton = document.getElementById('submitButton');
                const artworkForm = document.getElementById('artworkForm');
                const artworkIdInput = document.getElementById('artworkId');
                const artworkTitleInput = document.getElementById('artworkTitle');
                const creationYearInput = document.getElementById('creationYear');
                const technicInput = document.getElementById('technic');
                const materialInput = document.getElementById('material');
                const sizeInput = document.getElementById('size');
                const authorIdInput = document.getElementById('authorId');
                const collectionIdInput = document.getElementById('collectionId');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function openModal() {
                    modal.style.display = 'flex';
                }

                function closeModal() {
                    modal.style.display = 'none';
                }

                // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeModal();
                    }
                });

                function resetAndOpenModal() {
                    isEditing = false;
                    currentArtwork = { 
                        id: '', 
                        title: '', 
                        creationYear: new Date().getFullYear(), 
                        technic: '', 
                        material: '', 
                        size: '', 
                        authorId: '', 
                        collectionId: '' 
                    };
                    updateFormFields();
                    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ';
                    submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
                    openModal();
                }

                function prepareEditModal(id, title, creationYear, technic, material, size, authorId, collectionId) {
                    isEditing = true;
                    currentArtwork = {
                        id: id,
                        title: title,
                        creationYear: creationYear,
                        technic: technic,
                        material: material,
                        size: size,
                        authorId: authorId,
                        collectionId: collectionId
                    };
                    updateFormFields();
                    modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ';
                    submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    openModal();
                }

                function updateFormFields() {
                    artworkIdInput.value = currentArtwork.id;
                    artworkTitleInput.value = currentArtwork.title;
                    creationYearInput.value = currentArtwork.creationYear;
                    technicInput.value = currentArtwork.technic;
                    materialInput.value = currentArtwork.material;
                    sizeInput.value = currentArtwork.size;
                    authorIdInput.value = currentArtwork.authorId;
                    collectionIdInput.value = currentArtwork.collectionId;
                }

                async function handleFormSubmit(event) {
                    event.preventDefault();
                    
                    const formData = {
                        title: artworkTitleInput.value,
                        creationYear: parseInt(creationYearInput.value),
                        technic: technicInput.value,
                        material: materialInput.value,
                        size: sizeInput.value,
                        authorID: authorIdInput.value,
                        collectionID: collectionIdInput.value
                    };

                    if (isEditing) {
                        formData.id = artworkIdInput.value;
                        await updateArtwork(formData);
                    } else {
                        await addArtwork(formData);
                    }
                }

                async function confirmDeleteArtwork(id) {
                    if (!confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
                    await deleteArtwork(id);
                }

                // API —Ñ—É–Ω–∫—Ü–∏–∏
                async function fetchArtworks() {
                    try {
                        const response = await fetch('/api/v1/employee/artworks', {
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            }
                        });
                        return await response.json();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:', error);
                        return [];
                    }
                }

                async function addArtwork(data) {
                    try {
                        const response = await fetch('/api/v1/employee/artworks', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                    }
                }

                async function updateArtwork(data) {
                    try {
                        const response = await fetch('/api/v1/employee/artworks', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                    }
                }

                async function deleteArtwork(id) {
                    try {
                        const response = await fetch('/api/v1/employee/artworks', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify({ id })
                        });
 
                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
                    }
                }

                // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                function currentYear() {
                    return new Date().getFullYear();
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                document.addEventListener('DOMContentLoaded', function() {
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    creationYearInput.max = currentYear();
                });
            </script>
        </div>
    }
}