package components

import (
    "git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
    // "github.com/a-h/templ"
)

templ AuthorsPage(tokenKey string, authors []jsonreqresp.AuthorResponse) {
    @EmployeesNavigate("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏") {
        <div class="crud-container" id="authorsContainer">
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
            <div class="modal" id="authorModal" style="display: none;">
                <div class="modal-content" onclick="event.stopPropagation()">
                    <h3 id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞</h3>
                    
                    <form id="authorForm" onsubmit="return handleFormSubmit(event)">
                        <input type="hidden" id="authorId">
                        
                        <div class="form-group">
                            <label>–ò–º—è –∞–≤—Ç–æ—Ä–∞</label>
                            <input 
                                type="text" 
                                id="authorName"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                            <input 
                                type="number" 
                                id="birthYear"
                                required
                                min="1000"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label>–ì–æ–¥ —Å–º–µ—Ä—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                            <input 
                                type="number" 
                                id="deathYear"
                                min="1000"
                            >
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" id="submitButton">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                    </form>
                </div>
            </div>
 
            <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -->
            <div class="crud-header">
                <h2>–ê–≤—Ç–æ—Ä—ã</h2>
                <button 
                    class="add-button" 
                    onclick="resetAndOpenModal()"
                >+ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞</button>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ—Ä–æ–≤ -->
            <table class="crud-table">
                <thead>
                    <tr>
                        <th>–ò–º—è</th>
                        <th>–ì–æ–¥—ã –∂–∏–∑–Ω–∏</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    for _, author := range authors {
                        <tr>
                            <td>{ author.Name }</td>
                            <td>
                                { author.BirthYear } - 
                                if author.DeathYear != 0 {
                                    { author.DeathYear }
                                } else {
                                    <span class="still-alive">...</span>
                                }
                            </td>
                            <td class="actions">
                                <button 
                                    class="edit-btn" 
                                    onclick={ templ.JSFuncCall("prepareEditModal", author.ID, author.Name, author.BirthYear, author.DeathYear) }
                                >‚úèÔ∏è</button>
                                <button 
                                    class="delete-btn" 
                                    onclick={ templ.JSFuncCall("confirmDeleteAuthor", author.ID) }
                                >üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API -->
            <script>
                const ACCESS_TOKEN_KEY = "@tokenKey";
                // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                let isEditing = false;
                let currentAuthor = {
                    id: '',
                    name: '',
                    birthYear: 0,
                    deathYear: 0
                };

                // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
                const modal = document.getElementById('authorModal');
                const modalTitle = document.getElementById('modalTitle');
                const submitButton = document.getElementById('submitButton');
                const authorForm = document.getElementById('authorForm');
                const authorIdInput = document.getElementById('authorId');
                const authorNameInput = document.getElementById('authorName');
                const birthYearInput = document.getElementById('birthYear');
                const deathYearInput = document.getElementById('deathYear');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function openModal() {
                    modal.style.display = 'flex';
                }

                function closeModal() {
                    modal.style.display = 'none';
                }

                // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeModal();
                    }
                });

                function resetAndOpenModal() {
                    isEditing = false;
                    currentAuthor = { id: '', name: '', birthYear: 0, deathYear: 0 };
                    updateFormFields();
                    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞';
                    submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
                    openModal();
                }

                function prepareEditModal(id, name, birthYear, deathYear) {
                    isEditing = true;
                    currentAuthor = {
                        id: id,
                        name: name,
                        birthYear: birthYear,
                        deathYear: deathYear || 0
                    };
                    updateFormFields();
                    modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞';
                    submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    openModal();
                }

                function updateFormFields() {
                    authorIdInput.value = currentAuthor.id;
                    authorNameInput.value = currentAuthor.name;
                    birthYearInput.value = currentAuthor.birthYear;
                    deathYearInput.value = currentAuthor.deathYear || '';
                }

                async function handleFormSubmit(event) {
                    event.preventDefault();
                    
                    const formData = {
                        name: authorNameInput.value,
                        birthYear: parseInt(birthYearInput.value),
                        deathYear: deathYearInput.value ? parseInt(deathYearInput.value) : null
                    };

                    if (isEditing) {
                        formData.id = authorIdInput.value;
                        await updateAuthor(formData);
                    } else {
                        await addAuthor(formData);
                    }
                }

                async function confirmDeleteAuthor(id) {
                    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
                    await deleteAuthor(id);
                }

                // API —Ñ—É–Ω–∫—Ü–∏–∏
                async function fetchAuthors() {
                    try {
                        const response = await fetch('/api/v1/employee/authors', {
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            }
                        });
                        return await response.json();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤:', error);
                        return [];
                    }
                }

                async function addAuthor(data) {
                    try {
                        const response = await fetch('/api/v1/employee/authors', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞');
                    }
                }

                async function updateAuthor(data) {
                    try {
                        const response = await fetch('/api/v1/employee/authors', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞');
                    }
                }

                async function deleteAuthor(id) {
                    try {
                        const response = await fetch('/api/v1/employee/authors', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify({ id })
                        });
 
                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞');
                    }
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                document.addEventListener('DOMContentLoaded', function() {
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ —Å–º–µ—Ä—Ç–∏ —Ä–∞–≤–Ω—ã–º –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è
                    birthYearInput.addEventListener('change', function() {
                        deathYearInput.min = this.value;
                    });
                });
            </script>
        </div>
    }
}