package components

import (
    "git.iu7.bmstu.ru/ped22u691/PPO.git/internal/models/json_req_resp"
)

templ CollectionsPage(tokenKey string, collections []jsonreqresp.CollectionResponse) {
    @EmployeesNavigate("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏") {
        <div class="crud-container" id="collectionsContainer">
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
            <div class="modal" id="collectionModal" style="display: none;">
                <div class="modal-content" onclick="event.stopPropagation()">
                    <h3 id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é</h3>
                    
                    <form id="collectionForm" onsubmit="return handleFormSubmit(event)">
                        <input type="hidden" id="collectionId">
                        
                        <div class="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</label>
                            <input 
                                type="text" 
                                id="collectionTitle"
                                required
                                minlength="2"
                                maxlength="100"
                            >
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" id="submitButton">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                    </form>
                </div>
            </div>
 
            <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -->
            <div class="crud-header">
                <h2>–ö–æ–ª–ª–µ–∫—Ü–∏–∏</h2>
                <button 
                    class="add-button" 
                    onclick="resetAndOpenModal()"
                >+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é</button>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π -->
            <table class="crud-table">
                <thead>
                    <tr>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    for _, collection := range collections {
                        <tr>
                            <td>{ collection.Title }</td>
                            <td class="actions">
                                <button 
                                    class="edit-btn" 
                                    onclick={ templ.JSFuncCall("prepareEditModal", collection.ID, collection.Title) }
                                >‚úèÔ∏è</button>
                                <button 
                                    class="delete-btn" 
                                    onclick={ templ.JSFuncCall("confirmDeleteCollection", collection.ID) }
                                >üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API -->
            <script>
                const ACCESS_TOKEN_KEY = "@tokenKey";
                // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                let isEditing = false;
                let currentCollection = {
                    id: '',
                    title: ''
                };

                // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
                const modal = document.getElementById('collectionModal');
                const modalTitle = document.getElementById('modalTitle');
                const submitButton = document.getElementById('submitButton');
                const collectionForm = document.getElementById('collectionForm');
                const collectionIdInput = document.getElementById('collectionId');
                const collectionTitleInput = document.getElementById('collectionTitle');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function openModal() {
                    modal.style.display = 'flex';
                }

                function closeModal() {
                    modal.style.display = 'none';
                }

                // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeModal();
                    }
                });

                function resetAndOpenModal() {
                    isEditing = false;
                    currentCollection = { id: '', title: '' };
                    updateFormFields();
                    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é';
                    submitButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
                    openModal();
                }

                function prepareEditModal(id, title) {
                    isEditing = true;
                    currentCollection = {
                        id: id,
                        title: title
                    };
                    updateFormFields();
                    modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é';
                    submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    openModal();
                }

                function updateFormFields() {
                    collectionIdInput.value = currentCollection.id;
                    collectionTitleInput.value = currentCollection.title;
                }

                async function handleFormSubmit(event) {
                    event.preventDefault();
                    
                    const formData = {
                        title: collectionTitleInput.value
                    };

                    if (isEditing) {
                        formData.id = collectionIdInput.value;
                        await updateCollection(formData);
                    } else {
                        await addCollection(formData);
                    }
                }

                async function confirmDeleteCollection(id) {
                    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
                    await deleteCollection(id);
                }

                // API —Ñ—É–Ω–∫—Ü–∏–∏
                async function fetchCollections() {
                    try {
                        const response = await fetch('/api/v1/employee/collections', {
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            }
                        });
                        return await response.json();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
                        return [];
                    }
                }

                async function addCollection(data) {
                    try {
                        const response = await fetch('/api/v1/employee/collections', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
                    }
                }

                async function updateCollection(data) {
                    try {
                        const response = await fetch('/api/v1/employee/collections', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
                    }
                }

                async function deleteCollection(id) {
                    try {
                        const response = await fetch('/api/v1/employee/collections', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem(ACCESS_TOKEN_KEY)}`
                            },
                            body: JSON.stringify({ id })
                        });
 
                        if (!response.ok) throw await response.json();
                        window.location.reload();
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                        alert(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é');
                    }
                }
            </script>
        </div>
    }
}